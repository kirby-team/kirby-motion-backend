plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'com.diffplug.spotless' version '6.19.0'
}

bootJar.enabled = false

// 루트 전용
repositories {
    mavenCentral()
}

subprojects {
    group = 'kirby'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '21'

    repositories {
        mavenCentral()
    }

    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    jacoco {
        toolVersion = '0.8.11'
        // reportsDir = ${project.reporting.baseDir}/jacoco
    }
    jacocoTestReport {
        dependsOn test
        reports {
            html.required.set(true) // html 설정
            csv.required.set(true) // csv 설정
            xml.required.set(true)
            xml.destination file("reports/jacoco.xml")
        }
        def Qdomains = []

        for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
            Qdomains.add(qPattern + '*')
        }

        afterEvaluate {
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, excludes: [
                                "**/*Application*",
                                "**/*Config*",
                                "**/*Dto*",
                                "**/*Request*",
                                "**/*Response*",
                                "**/*Interceptor*",
                                "**/*Exception*"
                        ] + Qdomains)
                    })
            )
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
//        developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
}

spotless {
    java {
        target("**/*.java")
        indentWithTabs(1)
        indentWithSpaces(2)
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        googleJavaFormat()
        formatAnnotations()
    }
}
